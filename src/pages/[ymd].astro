---
import { Image, Picture } from "astro:assets";
import type { GetStaticPaths } from "astro";
import { format, parseISO } from "date-fns";
import Layout from "../components/layout.astro";
import { getPhotoFiles, getPhotos } from "../lib/photos";
import { getCaption } from "../lib/captions";

export const getStaticPaths = (() => {
  const photos = getPhotos();
  return photos.map((photo) => {
    return {
      params: { ymd: photo.ymd },
      props: {
        ymd: photo.ymd,
        filename: photo.filename,
        extension: photo.extension,
      },
    };
  });
}) satisfies GetStaticPaths;

const { ymd, filename, extension } = Astro.props;

const caption = await getCaption(ymd);

const photos = getPhotos();
const ymds = photos.map((photo) => photo.ymd);
const previousYmd = ymds[ymds.indexOf(ymd) - 1];
const nextYmd = ymds[ymds.indexOf(ymd) + 1];

const title = format(parseISO(ymd), "PPPP");
---

<Layout title={title}>
  <div>
    <div class="flex items-center justify-between">
      <p class="font-bold">{title}</p>

      <p class="space-x-1">
        <a
          href={previousYmd ? `/${previousYmd}` : `/${ymd}`}
          data-previous
          class:list={[
            "inline-block font-sans font-bold",
            previousYmd ? "text-blue-800" : "text-gray-300 pointer-events-none",
          ]}
        >
          &larr;
        </a>

        <a
          href={nextYmd ? `/${nextYmd}` : `/${ymd}`}
          data-next
          class:list={[
            "inline-block font-sans font-bold",
            nextYmd ? "text-blue-800" : "text-gray-300 pointer-events-none",
          ]}
        >
          &rarr;
        </a>
      </p>
    </div>

    <p class="text-gray-400">#{ymds.indexOf(ymd) + 1}</p>

    {
      extension === "mov" ? (
        <div class="mt-4">
          <video
            src={`/photos/${ymd}.${extension}`}
            controls
            playsinline
            class="w-full"
          />
        </div>
      ) : (
        <Image
          src={getPhotoFiles()[filename]()}
          format="jpg"
          alt=""
          width={2000}
          class="mt-4"
        />
      )
    }

    {
      caption && (
        <p class="mt-4 text-gray-500 italic whitespace-pre-line">{caption}</p>
      )
    }
  </div>

  <script>
    window.addEventListener("keydown", (event) => {
      if (event.key === "ArrowLeft" && !event.metaKey) {
        const previousLink = document.querySelector("[data-previous]") as HTMLAnchorElement;
        if (previousLink && !previousLink.classList.contains("pointer-events-none")) {
          previousLink.click();
        }
      }

      if (event.key === "ArrowRight" && !event.metaKey) {
        const nextLink = document.querySelector("[data-next]") as HTMLAnchorElement;
        if (nextLink && !nextLink.classList.contains("pointer-events-none")) {
          nextLink.click();
        }
      }

      if (event.key === "Escape" && !event.metaKey) {
        window.location.href = "/";
      }
    });
  </script>
</Layout>
